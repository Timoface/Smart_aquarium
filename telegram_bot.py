import dotenv
import os
import datetime
import json
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

import commands

dotenv.load_dotenv()
TOKEN = os.getenv("TOKEN")
bot = telebot.TeleBot(TOKEN)

def load_last_data():
    try:
        with open("last_data.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return {}

def save_last_data(data):
    with open("last_data.json", "w") as file:
        json.dump(data, file, indent=4)

@bot.message_handler(commands=['start'])
def start(message):
    start_message = ("<b>–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–º–Ω—ã–º –∞–∫–≤–∞—Ä–∏—É–º–æ–º! üêü\n"
                     "–¢—ã –º–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /last –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π –∞–∫–≤–∞—Ä–∏—É–º–∞! üìè\n"
                     "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å! üëá</b>")

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(
        text="–ü–æ–∫–æ—Ä–º–∏—Ç—å —Ä—ã–±–æ–∫ ü•¨",
        callback_data="feed"
    ))
    markup.add(InlineKeyboardButton(
        text="–£–∑–Ω–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤–æ–¥—ã üå°",
        callback_data="temperature"
    ))
    markup.add(InlineKeyboardButton(
        text="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç üí°",
        callback_data="light"
    ))

    bot.send_message(
        text=start_message,
        parse_mode="HTML",
        chat_id=message.chat.id,
        reply_markup=markup
    )

@bot.message_handler(commands=['last'])
def last(message):
    last_data = load_last_data()

    if not last_data:
        bot.send_message(
            chat_id=message.chat.id,
            text="<b>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ—Ä–µ–Ω–∏—è—Ö.</b>",
            parse_mode="HTML"
        )
        return

    response = "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è: üìè</b>\n\n"

    if "last_feed_small" in last_data:
        response += f"üêü <b>–ú–∞–ª–µ–Ω—å–∫–∏–µ —Ä—ã–±–∫–∏ –ø–æ–∫–æ—Ä–º–ª–µ–Ω—ã:</b> {last_data['last_feed_small']}\n"
    if "last_feed_big" in last_data:
        response += f"üê† <b>–ë–æ–ª—å—à–∏–µ —Ä—ã–±–∫–∏ –ø–æ–∫–æ—Ä–º–ª–µ–Ω—ã:</b> {last_data['last_feed_big']}\n"
    if "last_temperature" in last_data:
        response += f"üå° <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã:</b> {last_data['last_temperature']['value']}¬∞C (–∏–∑–º–µ—Ä–µ–Ω–æ: {last_data['last_temperature']['time']})\n"
    if "last_light_toggle" in last_data:
        response += f"üí° <b>–°–≤–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω:</b> {last_data['last_light_toggle']}\n"

    bot.send_message(
        chat_id=message.chat.id,
        text=response,
        parse_mode="HTML"
    )

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    last_data = load_last_data()

    if call.data == "feed":
        feed_markup = InlineKeyboardMarkup()
        feed_markup.add(InlineKeyboardButton(
            text="–ü–æ–∫–æ—Ä–º–∏—Ç—å –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ä—ã–±–æ–∫ üêü",
            callback_data="feed_small"
        ))
        feed_markup.add(InlineKeyboardButton(
            text="–ü–æ–∫–æ—Ä–º–∏—Ç—å –±–æ–ª—å—à–∏—Ö —Ä—ã–±–æ–∫ üê†",
            callback_data="feed_big"
        ))

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="<b>üóí –í—ã–±–µ—Ä–∏, –∫–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–∫–æ—Ä–º–∏—Ç—å:</b>",
            reply_markup=feed_markup,
            parse_mode="HTML"
        )
    elif call.data == "feed_small":
        bot.answer_callback_query(call.id, "–ú–∞–ª–µ–Ω—å–∫–∏–µ —Ä—ã–±–∫–∏ –Ω–∞–∫–æ—Ä–º–ª–µ–Ω—ã! üêüü•¨")
        commands.feed_small()
        last_data["last_feed_small"] = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        save_last_data(last_data)
    elif call.data == "feed_big":
        bot.answer_callback_query(call.id, "–ë–æ–ª—å—à–∏–µ —Ä—ã–±–∫–∏ –Ω–∞–∫–æ—Ä–º–ª–µ–Ω—ã! üê†ü•¨")
        commands.feed_big()
        last_data["last_feed_big"] = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        save_last_data(last_data)
    elif call.data == "temperature":
        temperature = commands.temperature()
        bot.answer_callback_query(call.id, f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã: {temperature}¬∞C üå°")
        last_data["last_temperature"] = {
            "value": temperature,
            "time": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        save_last_data(last_data)
    elif call.data == "light":
        bot.answer_callback_query(call.id, "–°–≤–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω! üí°")
        commands.light()
        last_data["last_light_toggle"] = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        save_last_data(last_data)


if __name__ == '__main__':
    bot.infinity_polling()